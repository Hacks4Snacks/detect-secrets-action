name: "secret-search"
description: "Detect secrets within a code base with Yelp's detect-secrets tool"
inputs:
  exclude-file:
    description: "File to Exclude from the scan"
    required: false
    default: "NOFILETOEXCLUDE"
  fail-on-error:
    description: "Fail the pipeline if any secrets are detected"
    required: false
    default: "true"
  failure-count:
    description: "Number of secrets to fail the pipeline"
    required: false
    default: "0"
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3

    - name: Set Python 3 as default

      uses: actions/setup-python@v4

      with:
        python-version: 3

    - name: Install detect-secrets using pip

      run: pip install detect-secrets

      shell: bash

    - name: Run detect-secrets tool

      run: |
        detect-secrets --version
        detect-secrets scan --all-files --force-use-all-plugins --exclude-files FETCH_HEAD --exclude-files ${{ inputs.exclude-file }} > ${{ env.Pipeline.Workspace }}/tmp/detect-secrets.json
      shell: bash

    - name: Publish results in the Pipeline Artifact

      uses: actions/upload-artifact@v3

      with:
        path: ${{ env.Pipeline.Workspace }}/tmp/detect-secrets.json

    - name: Analyzing detect-secrets results

      run: |
        RESULT=$(cat ${{ env.Pipeline.Workspace }}/tmp/detect-secrets.json | jq -c -r '.results | length')
        if [[ ${{ inputs.fail-on-error }} == "true" && $RESULT -gt $((${{ inputs.failure-count }})) ]]; then
           msg="Secrets were detected in code. $RESULT file(s) affected. Review artifact file for more information."
           echo $msg
           exit 1
        elif [[ ${{ inputs.fail-on-error }} == "false" && $RESULT -gt $((${{ inputs.failure-count }})) ]]; then
           msg="Secrets were detected in code. $RESULT file(s) affected. Review artifact file for more information."
           echo $msg
        else
           echo "No secrets detected."
        fi
      shell: bash
branding:
  icon: eye
  color: gray-dark
